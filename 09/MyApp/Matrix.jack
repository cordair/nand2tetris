class Matrix {
    field int width;
    field int height;
    field Array array2d;

    constructor Matrix new(int init_width, int init_height) {
        var int i;
        let width = init_width;
        let height = init_height;
        let array2d = Array.new(height);
        let i = 0;
        while (i < height) {
            let array2d[i] = Array.new(width);
            let i = i + 1;
        }
        return this;
    }

    method void dispose() {
        var int i;
        var Array a;
        let i = 0;
        while (i < height) {
            let a = array2d[i];
            do Array.dispose(a);
            let i = i + 1;
        }
        do Array.dispose(array2d);
        do Memory.deAlloc(this);
        return;
    }

    method void set(int x, int y, int value) {
        var Array row;
        let row = array2d[y];
        let row[x] = value;
        return;
    }

    method int get(int x, int y) {
        var Array row;
        let row = array2d[y];
        return row[x];
    }

    method Array getRow(int row) {
        return array2d[row];
    }

    method void moveRow(Array newRow, int row) {
        var int i;
        let i = 0;
        while (i < width) {
            do set(row, i, newRow[i]);
            let newRow[i] = false;
            let i = i + 1;
        }
        return;
    }

    method Matrix saveMatrix() {
        var Matrix newMatrix;
        var Array a;
        var int values;
        var int i;
        var int j;
        let newMatrix = Matrix.new(width, height);
        let i = 0;
        while (i < height) {
            let j = 0;
            let a = newMatrix.getRow(i);
            while (j < width) {
                let values = get(j, i);
                let a[j] = values;
                let j = j + 1;
            }
            let i = i + 1;
        }

        return newMatrix;
    }
}