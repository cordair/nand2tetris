function Piece.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push constant 0
pop static 1
push constant 1
pop static 2
push constant 2
pop static 3
push constant 3
pop static 4
push constant 4
pop static 5
push constant 5
pop static 6
push constant 6
pop static 7
push constant 4
call Array.new 1
pop this 0
push constant 0
push this 0
add
push argument 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 0
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 0
add
push argument 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 0
add
push argument 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push pointer 0
call Piece.initWidthHeight 1
pop temp 0
push this 3
call Array.new 1
pop this 1
push pointer 0
call Piece.initSkirt 1
pop temp 0
push pointer 0
return
function Piece.dispose 0
push argument 0
pop pointer 0
push this 0
call Array.dispose 1
pop temp 0
push this 1
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Piece.calculatePieceRotation 10
push argument 0
pop pointer 0
push constant 0
push this 0
add
pop pointer 1
push that 0
pop local 2
push constant 1
push this 0
add
pop pointer 1
push that 0
pop local 3
push constant 2
push this 0
add
pop pointer 1
push that 0
pop local 4
push constant 3
push this 0
add
pop pointer 1
push that 0
pop local 5
push this 4
push constant 1
sub
push local 2
call Point.getY 1
sub
pop local 0
push local 2
call Point.getX 1
pop local 1
push local 0
push local 1
call Point.new 2
pop local 6
push this 4
push constant 1
sub
push local 3
call Point.getY 1
sub
pop local 0
push local 3
call Point.getX 1
pop local 1
push local 0
push local 1
call Point.new 2
pop local 7
push this 4
push constant 1
sub
push local 4
call Point.getY 1
sub
pop local 0
push local 4
call Point.getX 1
pop local 1
push local 0
push local 1
call Point.new 2
pop local 8
push this 4
push constant 1
sub
push local 5
call Point.getY 1
sub
pop local 0
push local 5
call Point.getX 1
pop local 1
push local 0
push local 1
call Point.new 2
pop local 9
push local 6
push local 7
push local 8
push local 9
call Piece.new 4
return
function Piece.equals 6
push argument 0
pop pointer 0
push argument 1
call Piece.getBody 1
pop local 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 5
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push constant 4
lt
not
if-goto WHILE_END1
push local 1
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 5
push local 4
call Point.equals 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push constant 1
add
pop local 2
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 2
push constant 4
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
return
label IF_FALSE1
push constant 0
return
function Piece.createRotations 8
push argument 0
push static 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
push constant 0
call Point.new 2
pop local 0
push constant 0
push constant 1
call Point.new 2
pop local 1
push constant 0
push constant 2
call Point.new 2
pop local 2
push constant 0
push constant 3
call Point.new 2
pop local 3
label IF_FALSE0
push argument 0
push static 4
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
push constant 0
call Point.new 2
pop local 0
push constant 1
push constant 0
call Point.new 2
pop local 1
push constant 1
push constant 1
call Point.new 2
pop local 2
push constant 2
push constant 1
call Point.new 2
pop local 3
label IF_FALSE1
push argument 0
push static 5
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
push constant 1
call Point.new 2
pop local 0
push constant 1
push constant 1
call Point.new 2
pop local 1
push constant 1
push constant 0
call Point.new 2
pop local 2
push constant 2
push constant 0
call Point.new 2
pop local 3
label IF_FALSE2
push argument 0
push static 2
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
push constant 0
call Point.new 2
pop local 0
push constant 0
push constant 1
call Point.new 2
pop local 1
push constant 0
push constant 2
call Point.new 2
pop local 2
push constant 1
push constant 0
call Point.new 2
pop local 3
label IF_FALSE3
push argument 0
push static 3
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
push constant 0
call Point.new 2
pop local 0
push constant 1
push constant 0
call Point.new 2
pop local 1
push constant 1
push constant 1
call Point.new 2
pop local 2
push constant 1
push constant 2
call Point.new 2
pop local 3
label IF_FALSE4
push argument 0
push static 6
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
push constant 0
call Point.new 2
pop local 0
push constant 0
push constant 1
call Point.new 2
pop local 1
push constant 1
push constant 0
call Point.new 2
pop local 2
push constant 1
push constant 1
call Point.new 2
pop local 3
label IF_FALSE5
push argument 0
push static 7
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 0
push constant 0
call Point.new 2
pop local 0
push constant 1
push constant 0
call Point.new 2
pop local 1
push constant 1
push constant 1
call Point.new 2
pop local 2
push constant 2
push constant 0
call Point.new 2
pop local 3
label IF_FALSE6
push local 0
push local 1
push local 2
push local 3
call Piece.new 4
pop local 6
push local 6
pop local 4
push constant 0
pop local 7
label WHILE_EXP0
push local 7
not
not
if-goto WHILE_END0
push local 4
call Piece.calculatePieceRotation 1
pop local 5
push local 5
push local 6
call Piece.equals 2
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
not
pop local 7
goto IF_END7
label IF_FALSE7
push local 4
push local 5
call Piece.setNext 2
pop temp 0
push local 5
pop local 4
label IF_END7
goto WHILE_EXP0
label WHILE_END0
push local 6
return
function Piece.getPieces 3
push constant 7
call Array.new 1
pop static 0
push constant 0
push static 0
add
push static 1
call Piece.createRotations 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 0
add
push static 2
call Piece.createRotations 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 0
add
push static 3
call Piece.createRotations 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 0
add
push static 4
call Piece.createRotations 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 0
add
push static 5
call Piece.createRotations 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 0
add
push static 6
call Piece.createRotations 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 0
add
push static 7
call Piece.createRotations 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
return
function Piece.initWidthHeight 4
push argument 0
pop pointer 0
push constant 0
pop local 1
push constant 0
pop local 2
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 3
push local 3
call Point.getX 1
push local 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
call Point.getX 1
pop local 1
label IF_FALSE0
push local 3
call Point.getY 1
push local 2
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 3
call Point.getY 1
pop local 2
label IF_FALSE1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
push constant 1
add
pop this 3
push local 2
push constant 1
add
pop this 4
push constant 0
return
function Piece.initSkirt 5
push argument 0
pop pointer 0
push constant 4
call Array.new 1
pop local 2
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push local 2
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push constant 4
lt
not
if-goto WHILE_END1
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 1
push local 1
call Point.getY 1
pop local 4
push local 1
call Point.getX 1
pop local 3
push local 4
push local 3
push local 2
add
pop pointer 1
push that 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
push local 2
add
push local 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
pop local 0
label WHILE_EXP2
push local 0
push constant 4
lt
not
if-goto WHILE_END2
push local 0
push local 2
add
pop pointer 1
push that 0
push constant 1
neg
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push this 1
add
push local 0
push local 2
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP2
label WHILE_END2
push local 2
call Array.dispose 1
pop temp 0
push constant 0
return
function Piece.getWidth 0
push argument 0
pop pointer 0
push this 3
return
function Piece.getHeight 0
push argument 0
pop pointer 0
push this 4
return
function Piece.getBody 0
push argument 0
pop pointer 0
push this 0
return
function Piece.skirt 0
push argument 0
pop pointer 0
push this 1
return
function Piece.rotate 0
push argument 0
pop pointer 0
push this 2
return
function Piece.setNext 0
push argument 0
pop pointer 0
push argument 1
pop this 2
push constant 0
return
