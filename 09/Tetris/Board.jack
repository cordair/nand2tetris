class Board {
    field Matrix board;
    field Matrix savedBoard;
    field Array heights;
    field Array widths;

    field boolean committed;
    field int maxHeight;
    static int WIDTH;
    static int HEIGHT;
    static int PLACE_OK;
    static int PLACE_ROW_FILLED;
    static int PLACE_OUT_BOUNDS;
    static int PLACE_BAD;

    constructor Board new(int width, int height) {
        var int i;
        let PLACE_OK = 0;
        let PLACE_ROW_FILLED = 1;
        let PLACE_OUT_BOUNDS = 2;
        let PLACE_BAD = 3;

        let WIDTH = width;
        let HEIGHT = height;
        let maxHeight = 0;
        let board = Matrix.new(WIDTH, HEIGHT);
        let savedBoard = Matrix.new(WIDTH, HEIGHT);
        let heights = Array.new(WIDTH);
        let widths = Array.new(HEIGHT);
        let committed = false;

        let i = 0;
        while (i < WIDTH) {
            let heights[i] = 0;
            let i = i + 1;
        }
        let i = 0;
        while (i < HEIGHT) {
            let widths[i] = 0;
            let i = i + 1;
        }
        return this;
    }

    method void dispose() {
        do board.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method int dropHeight(Piece piece, int x) {
        var Array pieceSkirt;
        var int ySkirt;
        var int i;
        var int maxY;
        
        let maxY = 0;
        let pieceSkirt = piece.getSkirt();
        let i = 0;
        while (i < piece.getWidth()) {
            let ySkirt = pieceSkirt[i];
            if ((heights[x + i] + ySkirt) > maxY) {
                let maxY = heights[x + i] + ySkirt;
            }
            let i = i + 1;
        }
        return HEIGHT - 1 - maxY;
    }

    method int placePiece(Piece piece, int x, int y) {
        var Array pieceBody;
        var Point point;
        var int i, result;
        var int boardX, boardY;

        if (committed) {
            do Output.printString("Board commit error!");
        }
        do saveBoard();
        let pieceBody = piece.getBody();
        let i = 0;
        let result = PLACE_OK;
        while (i < 4) {
            let point = pieceBody[i];
            let boardX = x + point.getX();
            let boardY = y + point.getY();               
            if (boardX > (WIDTH - 1) | (boardX < 0) | (boardY > (HEIGHT - 1)) | (boardY < 2)) {
                return PLACE_OUT_BOUNDS;
            }
            else {
                if (board.get(boardX, boardY) = 1) {
                    return PLACE_BAD;
                }
                do board.set(boardX, boardY, 1);
                let heights[boardX] = heights[boardX] + 1;
                let widths[boardY] = widths[boardY] + 1;
                if (heights[boardX] > maxHeight) { let maxHeight = heights[boardX] + 1; }
                if (widths[boardY] = WIDTH) { let result = PLACE_ROW_FILLED; }
            }
            let i = i + 1;
        }
        return result;
    }

    method void saveBoard() {
        let savedBoard = board.saveMatrix();
        return;
    }

    method void undo() {
        let committed = true;
        let board = savedBoard;
        return;
    }

    method void commit() {
        let committed = true;
        return;
    }

    method int clearRows() {
        var int numberToClear;
        let numberToClear = countRowsToClear();
        do shiftRows(numberToClear);
        do updateHeightArray(numberToClear);
        do updateWidthArray(numberToClear);
        return numberToClear;
    }

    method int countRowsToClear() {
        var int i;
        var int count;
        let count = 0;
        let i = HEIGHT - 1;
        while (i > 1) {
            if (widths[i] = WIDTH) {
                let count = count + 1;
            }
            let i = i - 1;
        }
        return count;
    }

    method void shiftRows(int n) {
        var Array a;
        var int count;
        let count = n;
        while (count > 0) {
            let a = board.getRow(HEIGHT - 1 - count);
            do board.moveRow(a, HEIGHT - 1 - (n - count));
            let count = count - 1;
        }
        return;
    }

    method void updateHeightArray(int n) {
        var int i;
        let i = 0;
        while (i < WIDTH) {
            let heights[i] = heights[i] - n;
            let i = i + 1;
        }
        return;
    }

    method void updateWidthArray(int n) {
        var int i;
        let i = 0;
        while (n > 0) {
            let widths[HEIGHT - 1 - n] = 0;
            let n = n - 1;
        }
        return;
    }

    method int getHeight(int col) {
        return widths[col];
    }

    method int getWidth(int row) {
        return heights[row];
    }

    method int getMaxHeight() {
        return maxHeight;
    }

    method Matrix getBoard() {
        return board;
    }

    function int PLACE_OK() {
        return PLACE_OK;
    }

    function int PLACE_OUT_BOUNDS() {
        return PLACE_OUT_BOUNDS;
    }

    function int PLACE_ROW_FILLED() {
        return PLACE_ROW_FILLED;
    }

    function int PLACE_BAD() {
        return PLACE_BAD;
    }

    function int WIDTH() {
        return WIDTH;
    }

    function int HEIGHT() {
        return HEIGHT;
    }

    // DEBUGGING PURPOSES

    method void modifyBoard() {
        var int i;
        var int j;
        var Piece currentPiece;
        var Array points;
        var Point currentPoint;

        let points = Array.new(4);
        let currentPoint = Point.new(0,0);
        let points[0] = currentPoint;
        let currentPoint = Point.new(1,0);
        let points[1] = currentPoint;
        let currentPoint = Point.new(2,0);
        let points[2] = currentPoint;
        let currentPoint = Point.new(3,0);
        let points[3] = currentPoint;
        let currentPiece = Piece.new(points[0], points[1], points[2], points[3]);

        let i = 0;
        let j = 0;

        do placePiece(currentPiece, 2, 2);
        do clearRows();
        return;
    }

    method void printBoard() {
        var int i;
        var int j;
        var int values;
        let i = 0;
        let j = 0;

        while (i < (HEIGHT)) {
            let j = 0;
            while (j < (WIDTH)) {
                let values = board.get(j, i);
                do Output.printInt(values);
                let j = j + 1;
            }
            do Output.println();
            let i = i + 1;
        }
        return;
    }
}