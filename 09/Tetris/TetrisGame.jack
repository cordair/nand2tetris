class TetrisGame {
    field Array pieces;
    field Board board;
    field Piece currentPiece;
    field Piece nextPiece;
    field Piece newPiece;
    field int currentX;
    field int currentY;
    field int nextx;
    field int nexty;

    field int WIDTH;
    field int HEIGHT;
    field int score;
    field boolean gameOn;
    field boolean paused;
    field int action;
    field boolean moved;
    field boolean doClearRow;
    
    field int timeMoved;
    field int timeTicked;
    field boolean debug;

    static int TOP_SPACE;
    static int NUMBER_OF_PIECES;
    static int ROTATE;
	static int LEFT;
	static int RIGHT;
	static int DROP;
	static int DOWN;
    static int NONE;
    static int MOVE_TIME;

    constructor TetrisGame new() {
        let NUMBER_OF_PIECES = 7;
        let ROTATE = 0;
        let LEFT = 1;
        let RIGHT = 2;
        let DROP = 3;
        let DOWN = 4;
        let NONE = -1;
        let WIDTH = 20;
        let HEIGHT = 16;
        let TOP_SPACE = 5;
        let MOVE_TIME = 1000;
        let action = -1;
        let doClearRow = false;

        let timeMoved = 0;
        let timeTicked = 0;
        let debug = false;
        
        let board = Board.new(WIDTH, HEIGHT, TOP_SPACE);
        let pieces = Piece.getPieces();
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void start() {
        var int result;
        var int clear;
        var int key;
        var boolean failed;
        let gameOn = true;
        let moved = false;
        do pickNextPiece();
        do addNewPiece();
        do pickNextPiece();
        do Renderer.renderPanel();
        
        while (gameOn) {
            let action = NONE;
            let moved = false;
            let key = Keyboard.keyPressed();
            let timeTicked = timeTicked + 1;
            let timeMoved = timeMoved + 1;
            if (timeMoved = MOVE_TIME)        { do move(key); let timeMoved = 0; }
            if (timeTicked = (MOVE_TIME * 6)) { let moved = false; let action = DOWN; let timeTicked = 0; }
            
            if (~(action = NONE)) { 
                if (~(currentPiece = null)) { do board.undo(); }
                do computeNextMove();
                let result = setCurrent();
            
                if (result = Board.PLACE_ROW_FILLED()) {
                    let doClearRow = ~doClearRow;
                }
                    
                let failed = false;
                if (result > (Board.PLACE_OUT_BOUNDS() - 1)) {
                    let failed = true;
                }

                if (failed) {
                    if (~(currentPiece = null)) { 
                        do board.placePiece(currentPiece, currentX, currentY); 
                        do paintPiece(currentPiece, currentX, currentY, true);
                    }
                }
                
                if (failed & (action = DOWN) & (~moved)) {
                    if (doClearRow) {
                        let clear = board.clearRows();
                        let score = score + (clear * 10);
                        do paint();
                        let doClearRow = ~doClearRow;
                    }
                    if (board.getMaxHeight() > (HEIGHT - TOP_SPACE)) { let gameOn = false; }
                    else { do addNewPiece(); do pickNextPiece(); }
                }
            }
            
        }
        return;
    }

    method void computeNextMove() {
        let nextx = currentX;
        let nexty = currentY;
        let nextPiece = currentPiece;
        if (action = ROTATE) {
            let nextPiece = currentPiece.rotate();

            let nextx = nextx + ((currentPiece.getWidth() - nextPiece.getWidth()) / 2);
            let nexty = nexty + ((currentPiece.getHeight() - nextPiece.getHeight()) / 2);

        }
        if (action = DROP) {
            let nexty = board.dropHeight(currentPiece, nextx);
            if (nexty < currentY) {
                let nexty = currentY;
            }
        }
        if (action = DOWN) {
            let nexty = currentY + 1;
        }
        if (action = LEFT) {
            let nextx = currentX - 1;
        }
        if (action = RIGHT) {
            let nextx = currentX + 1;
        }
        return;
    }

    method int setCurrent() {
        var int result;
        let result = board.placePiece(nextPiece, nextx, nexty);
        if (result < Board.PLACE_OUT_BOUNDS()) {
            do paintPiece(currentPiece, currentX, currentY, false);
            let currentPiece = nextPiece;
            let currentX = nextx;
            let currentY = nexty;
            do paintPiece(currentPiece, currentX, currentY, true);
        }
        else { do board.undo(); }
        return result;
    }

    method void addNewPiece() {
        var int result;
        
        do board.commit();
        let currentPiece = newPiece;
        let currentX = (Board.WIDTH() - currentPiece.getWidth()) / 2;
        let currentY = TOP_SPACE - 4;
        let result = board.placePiece(currentPiece, currentX, currentY);
        do paintPiece(currentPiece, currentX, currentY, true);
        return;
    }

    method void move(int key) {
        
        if (key = 140) { let gameOn = false;   }   // esc key
        if (key = 128) { 
            if (paused){ let paused = true;     }
            else       { let paused = false;    }
        }                                           // I don't know what key this is
        if (key = 32)  { let moved = true; let action = DROP;  }   // SPACE key
        if (key = 131) { let moved = true; let action = ROTATE;}   // up arrow
        if (key = 133) { let moved = true; let action = DOWN;  }   // down arrow
        if (key = 130) { let moved = true; let action = LEFT;  }   // left arrow
        if (key = 132) { let moved = true; let action = RIGHT; }   // right arrow
        return;
    }

    /**
    * The numbers in this function are pretty hardcoded
    *
    */
    method void pickNextPiece() {
		var int pieceNum;
        if (~(newPiece = null)) {
            do paintPiece(newPiece, WIDTH + 2, (HEIGHT / 2) - 2, false);
        }
        let pieceNum = Random.randRange(NUMBER_OF_PIECES - 1);
        let newPiece = pieces[pieceNum];
        do paintPiece(newPiece, WIDTH + 2, (HEIGHT / 2) - 2, true);
        return;
	}

    method void paintPanel() {
        do Renderer.renderPanel();
        return;
    }

    method void paintPiece(Piece piece, int x, int y, boolean color) {
        var Array pieceBody;
        var Point point;
        var int px, py;
        var int i;
        let pieceBody = piece.getBody();
        let i = 0;
        while (i < 4) {
            let point = pieceBody[i];
            let px = x + point.getX();
            let py = y + point.getY();
            
            do Renderer.renderBrick(px, py, color);
            let i = i + 1;
        }
        return;
    }

    method void paint() {
        var Matrix matrix;
        var Array a;
        var boolean color;
        var int px, py;
        let matrix = board.getBoard();
        while (py < Board.HEIGHT()) {
            let px = 0;
            let a = matrix.getRow(py);
            while (px < Board.WIDTH()) {
                let color = a[px];
                do Renderer.renderBrick(px, py, color);
                let px = px + 1;
            }
            let py = py + 1;
        }
        return;
    }
}