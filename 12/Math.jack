// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, currentValue;
        let twoToThe = Array.new(16);
        let i = 0;
        let currentValue = 1;
        while (i < 16) {
            let twoToThe[i] = currentValue;
            let currentValue = currentValue + currentValue;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) { return -x; }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let i = 1;
        let shiftedX = x;
        while (~(i = 0)) {
            if (((y & i) = i)) {
                let sum = sum + shiftedX;
            }
            let i = i + i;
            let shiftedX = shiftedX + shiftedX;
        }
        return sum;
    }

    function boolean bit(int x, int i) {
        return ~((x & twoToThe[i]) = 0);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int sign;
        let sign = 1;
        if (Math.bit(x, 15)) { let sign = -sign; let x = -x; }
        if (Math.bit(y, 15)) { let sign = -sign; let y = -y; }
        return sign * Math.dividePositive(x, y);
    }

    function int dividePositive(int x, int y) {
        var int q;
        if ((y < 0) | (y > x)) {
            return 0;
        }
        let q = Math.dividePositive(x, 2 * y);
        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        }
        return (2 * q) + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, power;
        let y = 0;
        let j = (16 / 2) - 1;
        while (j > -1) {
            let power = (y + twoToThe[j]) * (y + twoToThe[j]) ;
            if ((power > 0) & (~(power > x))) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) { return a; }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) { return b; }
        return a;
    }

    function int powerOfTwo(int i) {
        return twoToThe[i];
    }
}
