// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array screen;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        do Screen.setColor(false);
        while (i < 256) {
            do Screen.drawLine(0, i, 511, i);
            let i = i + 1;
        }
        do Screen.setColor(true);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;
        let address = (32 * y) + (x / 16);
        let value = screen[address];
        if (color) {
            let value = value | (Math.powerOfTwo(x & 15));
        }
        else {
            let value = value & (~Math.powerOfTwo(x & 15));
        }
        let screen[address] = value;
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, temp;
        var boolean steep;
        let dx = (x2 - x1);
        let dy = (y2 - y1);
        
        if (dx = 0) { 
            if (dy < 0) { do Screen.drawVerticalLine(x1, y2, y1); }
            else { do Screen.drawVerticalLine(x1, y1, y2); }
            return;
        }
        if (dy = 0) { 
            if (dx < 0) { do Screen.drawHorizontalLine(x2, x1, y1);  }
            else { do Screen.drawHorizontalLine(x1, x2, y1);  }
            return; 
        }

        if (Math.abs(dx) < Math.abs(dy)) { let steep = true; }
        if (steep) {
            if (dy < 0) {
                if (dx < 0) { do Screen.drawSteepFallingLine(x2, y2, -dx, -dy); }
                else { do Screen.drawSteepRisingLine(x1, y1, dx, -dy); }
            }
            else {
                if (dx < 0) { do Screen.drawSteepRisingLine(x2, y2, -dx, dy); }
                else { do Screen.drawSteepFallingLine(x1, y1, dx, dy); }
            }
        }
        else {
            if (dy < 0) {
                if (dx < 0) { do Screen.drawFallingLine(x2, y2, -dx, -dy); }
                else { do Screen.drawRisingLine(x1, y1, dx, -dy); }
            }
            else {
                if (dx < 0) { do Screen.drawRisingLine(x2, y2, -dx, dy); }
                else { do Screen.drawFallingLine(x1, y1, dx, dy); }
            }
        }
        return;
    }

    function void drawFallingLine(int x, int y, int dx, int dy) {
        var int a, b, diff;
        let a = 0;
        let b = 0;
        let diff = 0;
        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x + a, y + b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    function void drawRisingLine(int x, int y, int dx, int dy) {
        var int a, b, diff;
        let a = 0;
        let b = 0;
        let diff = 0;
        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x + a, y - b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    function void drawSteepFallingLine(int x, int y, int dx, int dy) {
        var int a, b, diff;
        let a = 0;
        let b = 0;
        let diff = 0;
        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(y + a, x + b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    function void drawSteepRisingLine(int x, int y, int dx, int dy) {
        var int a, b, diff;
        let a = 0;
        let b = 0;
        let diff = 0;
        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(y + a, x - b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int address, value;
        let address = 32 * y + (x1 / 16);
        let value = screen[address];
        
        if (color) {
            while (~(x1 > x2)) {
                let value = value | Math.powerOfTwo(x1 & 15);
                let x1 = x1 + 1;
                if (x1 & 15 = 0) {
                    let screen[address] = value;
                    let address = address + 1;
                    let value = screen[address];
                }
            }
            let screen[address] = value;
        }
        else {
            while (~(x1 > x2)) {
                let value = value & (~Math.powerOfTwo(x1 & 15));
                let x1 = x1 + 1;
                if (x1 & 15 = 0) {
                    let screen[address] = value;
                    let address = address + 1;
                    let value = screen[address];
                }
            }
            let screen[address] = value;
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        while (~(y1 = y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dxSquare, dx;
        let dy = -r;
        let dx = 0;
        let y = y - r;
        while (~(dy > r)) {
            do Screen.drawHorizontalLine(x - dx, x + dx,y);
            let dxSquare = dxSquare - (dy + dy) - 1;
            let dx = Math.sqrt(dxSquare);
            let y = y + 1;
            let dy = dy + 1;
        } 
        return;
    }
}
