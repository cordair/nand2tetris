function Screen.init 0
push constant 16384
pop static 1
push constant 0
not
pop static 0
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 256
lt
not
if-goto WHILE_END0
push constant 0
push local 0
push constant 511
push local 0
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 2
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push local 0
push static 1
add
pop pointer 1
push that 0
pop local 1
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push argument 0
push constant 15
and
call Math.powerOfTwo 1
or
pop local 1
goto IF_END0
label IF_FALSE0
push local 1
push argument 0
push constant 15
and
call Math.powerOfTwo 1
not
and
pop local 1
label IF_END0
push local 0
push static 1
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.drawLine 4
push argument 2
push argument 0
sub
pop local 0
push argument 3
push argument 1
sub
pop local 1
push local 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push argument 3
push argument 1
call Screen.drawVerticalLine 3
pop temp 0
goto IF_END1
label IF_FALSE1
push argument 0
push argument 1
push argument 3
call Screen.drawVerticalLine 3
pop temp 0
label IF_END1
push constant 0
return
label IF_FALSE0
push local 1
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push constant 0
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 2
push argument 0
push argument 1
call Screen.drawHorizontalLine 3
pop temp 0
goto IF_END3
label IF_FALSE3
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontalLine 3
pop temp 0
label IF_END3
push constant 0
return
label IF_FALSE2
push local 0
call Math.abs 1
push local 1
call Math.abs 1
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
not
pop local 3
label IF_FALSE4
push local 3
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 1
push constant 0
lt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 0
push constant 0
lt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push argument 1
push argument 2
push local 0
neg
push local 1
neg
call Screen.drawSteepFallingLine 4
pop temp 0
goto IF_END7
label IF_FALSE7
push argument 1
push argument 0
push local 0
push local 1
neg
call Screen.drawSteepFallingLine 4
pop temp 0
label IF_END7
goto IF_END6
label IF_FALSE6
push local 0
push constant 0
lt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push argument 1
push argument 2
push local 0
neg
push local 1
call Screen.drawSteepRisingLine 4
pop temp 0
goto IF_END8
label IF_FALSE8
push argument 1
push argument 0
push local 0
push local 1
call Screen.drawSteepRisingLine 4
pop temp 0
label IF_END8
label IF_END6
goto IF_END5
label IF_FALSE5
push local 1
push constant 0
lt
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push local 0
push constant 0
lt
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push argument 2
push argument 3
push local 0
neg
push local 1
neg
call Screen.drawFallingLine 4
pop temp 0
goto IF_END10
label IF_FALSE10
push argument 0
push argument 1
push local 0
push local 1
neg
call Screen.drawRisingLine 4
pop temp 0
label IF_END10
goto IF_END9
label IF_FALSE9
push local 0
push constant 0
lt
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push argument 2
push argument 3
push local 0
neg
push local 1
call Screen.drawRisingLine 4
pop temp 0
goto IF_END11
label IF_FALSE11
push argument 0
push argument 1
push local 0
push local 1
call Screen.drawFallingLine 4
pop temp 0
label IF_END11
label IF_END9
label IF_END5
push constant 0
return
function Screen.drawFallingLine 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 0
push argument 2
gt
not
push local 1
push argument 3
gt
not
and
not
if-goto WHILE_END0
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
push local 2
push argument 3
add
pop local 2
goto IF_END0
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
push local 2
push argument 2
sub
pop local 2
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawRisingLine 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 0
push argument 2
gt
not
push local 1
push argument 3
gt
not
and
not
if-goto WHILE_END0
push argument 0
push local 0
add
push argument 1
push local 1
sub
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
push local 2
push argument 3
add
pop local 2
goto IF_END0
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
push local 2
push argument 2
sub
pop local 2
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawSteepFallingLine 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 0
push argument 2
gt
not
push local 1
push argument 3
gt
not
and
not
if-goto WHILE_END0
push argument 1
push local 0
add
push argument 0
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
push local 2
push argument 3
add
pop local 2
goto IF_END0
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
push local 2
push argument 2
sub
pop local 2
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawSteepRisingLine 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 0
push argument 2
gt
not
push local 1
push argument 3
gt
not
and
not
if-goto WHILE_END0
push argument 1
push local 0
add
push argument 0
push local 1
sub
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
push local 2
push argument 3
add
pop local 2
goto IF_END0
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
push local 2
push argument 2
sub
pop local 2
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawHorizontalLine 2
push constant 32
push argument 2
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push local 0
push static 1
add
pop pointer 1
push that 0
pop local 1
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
label WHILE_EXP0
push argument 0
push argument 1
gt
not
not
if-goto WHILE_END0
push local 1
push argument 0
push constant 15
and
call Math.powerOfTwo 1
or
pop local 1
push argument 0
push constant 1
add
pop argument 0
push argument 0
push constant 15
and
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push static 1
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
push local 0
push static 1
add
pop pointer 1
push that 0
pop local 1
label IF_FALSE1
goto WHILE_EXP0
label WHILE_END0
push local 0
push static 1
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END0
label IF_FALSE0
label WHILE_EXP1
push argument 0
push argument 1
gt
not
not
if-goto WHILE_END1
push local 1
push argument 0
push constant 15
and
call Math.powerOfTwo 1
not
and
pop local 1
push argument 0
push constant 1
add
pop argument 0
push argument 0
push constant 15
and
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push static 1
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
push local 0
push static 1
add
pop pointer 1
push that 0
pop local 1
label IF_FALSE2
goto WHILE_EXP1
label WHILE_END1
push local 0
push static 1
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END0
push constant 0
return
function Screen.drawVerticalLine 0
label WHILE_EXP0
push argument 1
push argument 2
eq
not
not
if-goto WHILE_END0
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawRectangle 0
label WHILE_EXP0
push argument 1
push argument 3
gt
not
not
if-goto WHILE_END0
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontalLine 3
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 3
push argument 2
neg
pop local 0
push constant 0
pop local 2
push argument 1
push argument 2
sub
pop argument 1
label WHILE_EXP0
push local 0
push argument 2
gt
not
not
if-goto WHILE_END0
push argument 0
push local 2
sub
push argument 0
push local 2
add
push argument 1
call Screen.drawHorizontalLine 3
pop temp 0
push local 1
push local 0
push local 0
add
sub
push constant 1
sub
pop local 1
push local 1
call Math.sqrt 1
pop local 2
push argument 1
push constant 1
add
pop argument 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
